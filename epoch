epochs = 2
batch_size = 64
opt = 'adam'
model = Sequential()
model.add(Reshape((1,X_train.shape[1],1)))
model.add(Conv2D(filters=32,kernel_size=(1,5),padding='same',activation='relu',input_shape=(1,X_train.shape[1],1)))
#model.add(MaxPooling2D(pool_size=(1,6),strides=(1,2)))
model.add(MaxPooling2D(pool_size=(1,3),strides=(1,2)))
model.add(Flatten())
model.add(Dense(500,activation='relu'))
model.add(Dense(1,activation='linear'))
model.compile(loss='mean_absolute_percentage_error',optimizer=opt,metrics=['accuracy'])
history = model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=epochs, batch_size=batch_size)

SC=StandardScaler()
X_train_scale=SC.fit_transform(X_train)
X_test_scale=SC.transform(X_test)

rf_clf = kneighboursclassifiers()
rf_clf.fit(X_train_scale,y_train)
X_pred=rf_clf.predict(X_test_scale)
print(X_pred)
rf_clf.score(X_test_scale,y_test)
